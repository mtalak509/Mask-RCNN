# import streamlit as st
# import torch
# from PIL import Image
# import pandas as pd
# from ultralytics import YOLO
# import matplotlib.pyplot as plt

# image = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Ä–æ–¥–∏–Ω–∫–∏", type=['jpg', 'png'])

# st.title('–î–µ—Ç–µ–∫—Ü–∏—è –∫–æ—Ä–∞–±–ª–µ–π –ø–æ –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —Å–Ω–∏–º–∫–∞–º')

# try:
#     # Importing model
#     model = YOLO("models/ships_yolo8/weights/best.pt")
#     results = pd.read_csv('models/ships_yolo8/results/results.csv')
    
#     # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
#     if image is not None:
#         # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PIL
#         input_image = Image.open(image)
        
#         # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
#         results = model.predict(
#             source=input_image,
#             save=False,
#             show=False
#         )
        
#     else:
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
#         st.write('No image uploaded')
    
#     # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
#     if len(results) > 0:
#         result = results[0]  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
#         col1, col2 = st.columns([1, 1])
#         # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#         with col1:
#             st.image(input_image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
#         # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
#         with col2:
#             if hasattr(result, 'plot') and callable(getattr(result, 'plot')):
#                 plotted_image = result.plot()
#                 st.image(plotted_image, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_container_width=True)


#         # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–µ–∫—Ü–∏—è—Ö
#         if hasattr(result, 'boxes') and result.boxes is not None:
#             boxes = result.boxes
#             num_detections = len(boxes)
            
#             st.subheader(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {num_detections}")
            
#             # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
#             if num_detections > 0:
#                 detection_data = []
#                 for i, box in enumerate(boxes):
#                     confidence = box.conf.item()
#                     class_id = int(box.cls.item())
#                     class_name = result.names[class_id] if hasattr(result, 'names') else f"Class {class_id}"
                    
#                     detection_data.append({
#                         "–û–±—ä–µ–∫—Ç": i + 1,
#                         "–ö–ª–∞—Å—Å": class_name,
#                         "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{confidence:.3f}"
#                     })
                
#                 # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
#                 df = pd.DataFrame(detection_data)
#                 st.table(df)

#         else:
#             st.write("–û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")


#     def plot_training_results(df):
#         """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∏–∑ results.csv"""
        
#         plt.figure(figsize=(10, 5))

#         plt.plot(df['epoch'], df['metrics/mAP50(B)'], label='mAP50', marker='o')
#         plt.plot(df['epoch'], df['metrics/mAP50-95(B)'], label='mAP50-95', marker='o')
#         plt.xlabel('Epoch')
#         plt.ylabel('mAP')
#         plt.title('mAP Metrics Over Time')
#         plt.legend()
#         plt.grid(True)
#         plt.show()
        
#         # 2. Precision –∏ Recall
#         plt.figure(figsize=(10, 5))
#         plt.plot(df['epoch'], df['metrics/precision(B)'], label='Precision', marker='o')
#         plt.plot(df['epoch'], df['metrics/recall(B)'], label='Recall', marker='o')
#         plt.xlabel('Epoch')
#         plt.ylabel('Score')
#         plt.title('Precision & Recall Over Time')
#         plt.legend()
#         plt.grid(True)
#         plt.show()
        
#         # 3. –ü–æ—Ç–µ—Ä–∏
#         plt.figure(figsize=(10, 5))
#         plt.plot(df['epoch'], df['train/box_loss'], label='Box Loss', marker='o')
#         plt.plot(df['epoch'], df['train/cls_loss'], label='Class Loss', marker='o')
#         plt.xlabel('Epoch')
#         plt.ylabel('Loss')
#         plt.title('Training Loss Over Time')
#         plt.legend()
#         plt.grid(True)
#         plt.show()
#         # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
#     plot_training_results(results)

# except Exception as e:
#     st.write(f"–û—à–∏–±–∫–∞: {e}")








import streamlit as st
import torch
from PIL import Image
import pandas as pd
from ultralytics import YOLO
import matplotlib.pyplot as plt
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–î–µ—Ç–µ–∫—Ü–∏—è –∫–æ—Ä–∞–±–ª–µ–π", layout="wide")

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
image = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å–Ω–∏–º–æ–∫", type=['jpg', 'png', 'jpeg'])

st.title('üö¢ –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ—Ä–∞–±–ª–µ–π –ø–æ –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —Å–Ω–∏–º–∫–∞–º')

try:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    model = YOLO("models/ships_yolo8/weights/best.pt")
    results_df = pd.read_csv('models/ships_yolo8/results/results.csv')
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if image is not None:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PIL
        input_image = Image.open(image)
        
        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        with st.spinner('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...'):
            detection_results = model.predict(
                source=input_image,
                save=False,
                conf=0.25,
                imgsz=640
            )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if len(detection_results) > 0:
            result = detection_results[0]  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
            col1, col2 = st.columns([1, 1])
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with col1:
                st.image(input_image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
            with col2:
                if hasattr(result, 'plot') and callable(getattr(result, 'plot')):
                    plotted_image = result.plot()
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    plotted_image_rgb = plotted_image[:, :, ::-1]  # BGR to RGB
                    st.image(plotted_image_rgb, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_container_width=True)

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–µ–∫—Ü–∏—è—Ö
            if hasattr(result, 'boxes') and result.boxes is not None:
                boxes = result.boxes
                num_detections = len(boxes)
                
                st.subheader(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∞–±–ª–µ–π: {num_detections}")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                if num_detections > 0:
                    detection_data = []
                    for i, box in enumerate(boxes):
                        confidence = box.conf.item()
                        class_id = int(box.cls.item())
                        class_name = result.names[class_id] if hasattr(result, 'names') else f"Class {class_id}"
                        
                        detection_data.append({
                            "–ö–æ—Ä–∞–±–ª—å ‚Ññ": i + 1,
                            "–ö–ª–∞—Å—Å": class_name,
                            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{confidence:.3f}"
                        })
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
                    df_detections = pd.DataFrame(detection_data)
                    st.dataframe(df_detections, use_container_width=True)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    col_stat1, col_stat2, col_stat3 = st.columns(3)
                    with col_stat1:
                        st.metric("–í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", num_detections)
                    with col_stat2:
                        avg_confidence = np.mean([box.conf.item() for box in boxes])
                        st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.3f}")
                    with col_stat3:
                        max_confidence = np.max([box.conf.item() for box in boxes])
                        st.metric("–ú–∞–∫—Å. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{max_confidence:.3f}")

            else:
                st.warning("–ö–æ—Ä–∞–±–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    else:
        st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫–æ—Ä–∞–±–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã
        st.subheader("–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏")
        st.image("https://via.placeholder.com/600x400/4F8BF9/FFFFFF?text=–ó–∞–≥—Ä—É–∑–∏—Ç–µ+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ+–∫–æ—Ä–∞–±–ª–µ–π", 
                caption="–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                use_container_width=True)

    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    st.markdown("---")
    st.header("üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    
    tab1, tab2, tab3 = st.tabs(["–ì—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"])
    
    with tab1:
        st.subheader("–ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ mAP –º–µ—Ç—Ä–∏–∫
            fig1, ax1 = plt.subplots(figsize=(10, 6))
            ax1.plot(results_df['epoch'], results_df['metrics/mAP50(B)'], label='mAP50', marker='o', linewidth=2)
            ax1.plot(results_df['epoch'], results_df['metrics/mAP50-95(B)'], label='mAP50-95', marker='o', linewidth=2)
            ax1.set_xlabel('–≠–ø–æ—Ö–∞')
            ax1.set_ylabel('mAP')
            ax1.set_title('mAP –º–µ—Ç—Ä–∏–∫–∏')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            st.pyplot(fig1)
        
        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ Precision –∏ Recall
            fig2, ax2 = plt.subplots(figsize=(10, 6))
            ax2.plot(results_df['epoch'], results_df['metrics/precision(B)'], label='Precision', marker='o', linewidth=2, color='green')
            ax2.plot(results_df['epoch'], results_df['metrics/recall(B)'], label='Recall', marker='o', linewidth=2, color='orange')
            ax2.set_xlabel('–≠–ø–æ—Ö–∞')
            ax2.set_ylabel('Score')
            ax2.set_title('Precision & Recall')
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            st.pyplot(fig2)
        
        col3, col4 = st.columns(2)
        
        with col3:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å
            fig3, ax3 = plt.subplots(figsize=(10, 6))
            ax3.plot(results_df['epoch'], results_df['train/box_loss'], label='Box Loss', marker='o', linewidth=2)
            ax3.plot(results_df['epoch'], results_df['train/cls_loss'], label='Class Loss', marker='o', linewidth=2)
            ax3.plot(results_df['epoch'], results_df['train/dfl_loss'], label='DFL Loss', marker='o', linewidth=2)
            ax3.set_xlabel('–≠–ø–æ—Ö–∞')
            ax3.set_ylabel('Loss')
            ax3.set_title('Training Loss')
            ax3.legend()
            ax3.grid(True, alpha=0.3)
            st.pyplot(fig3)
        
        with col4:
            # –ì—Ä–∞—Ñ–∏–∫ Learning Rate
            fig4, ax4 = plt.subplots(figsize=(10, 6))
            ax4.plot(results_df['epoch'], results_df['lr/pg0'], label='Learning Rate', marker='o', linewidth=2, color='purple')
            ax4.set_xlabel('–≠–ø–æ—Ö–∞')
            ax4.set_ylabel('Learning Rate')
            ax4.set_title('Learning Rate Schedule')
            ax4.legend()
            ax4.grid(True, alpha=0.3)
            ax4.set_yscale('log')
            st.pyplot(fig4)
    
    with tab2:
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
        
        # –õ—É—á—à–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        best_epoch_map50 = results_df['metrics/mAP50(B)'].idxmax()
        best_map50 = results_df['metrics/mAP50(B)'].max()
        best_map = results_df['metrics/mAP50-95(B)'].max()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–õ—É—á—à–∞—è mAP50", f"{best_map50:.4f}")
        with col2:
            st.metric("–≠–ø–æ—Ö–∞ –ª—É—á—à–µ–π mAP50", best_epoch_map50 + 1)
        with col3:
            st.metric("–õ—É—á—à–∞—è mAP50-95", f"{best_map:.4f}")
        with col4:
            final_map50 = results_df['metrics/mAP50(B)'].iloc[-1]
            st.metric("–§–∏–Ω–∞–ª—å–Ω–∞—è mAP50", f"{final_map50:.4f}")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —ç–ø–æ—Ö–∞–º")
        display_columns = ['epoch', 'metrics/mAP50(B)', 'metrics/mAP50-95(B)', 
                          'metrics/precision(B)', 'metrics/recall(B)']
        display_df = results_df[display_columns].copy()
        display_df.columns = ['–≠–ø–æ—Ö–∞', 'mAP50', 'mAP50-95', 'Precision', 'Recall']
        st.dataframe(display_df.round(4), use_container_width=True)
    
    with tab3:
        st.subheader("–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —ç–ø–æ—Ö–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
        best_metrics = {
            'mAP50': results_df.loc[results_df['metrics/mAP50(B)'].idxmax()],
            'mAP50-95': results_df.loc[results_df['metrics/mAP50-95(B)'].idxmax()],
            'Precision': results_df.loc[results_df['metrics/precision(B)'].idxmax()],
            'Recall': results_df.loc[results_df['metrics/recall(B)'].idxmax()],
        }
        
        for metric_name, best_row in best_metrics.items():
            with st.expander(f"–õ—É—á—à–∞—è {metric_name}"):
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.write(f"**–≠–ø–æ—Ö–∞:** {int(best_row['epoch']) + 1}")
                with col2:
                    st.write(f"**{metric_name}:** {best_row[f'metrics/{metric_name}(B)']:.4f}")
                with col3:
                    st.write(f"**Precision:** {best_row['metrics/precision(B)']:.4f}")
                with col4:
                    st.write(f"**Recall:** {best_row['metrics/recall(B)']:.4f}")

except Exception as e:
    st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –º–æ–¥–µ–ª–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")